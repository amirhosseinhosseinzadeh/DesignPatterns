◙ Singleton pattern
◙ Factory Pattern
◙ Template method pattern
◙ Adapter pattern
◙ Facade pattern
◙ Strategy pattern
◙ State pattern
◙ Proxy pattern
◙ Chain of responsibility pattern
◙ Bridge pattern
◙ Composite pattern
◙ Decorator pattern
◙ Observer patterns
◙ Builder pattern
◙ Flyweghit pattern
◙ Repository pattern
---------------------------------------------------------------------------------------------

Singleton pattern =>
{
	If you want a class have only one object , Then we use singleton pattern
	
	make object constructor private
	we create a private field from that type and create a method to check if field is null then initialize it and return that field
	then make initializer method static
	another way for initializing is property with encapsulation 
}

Factory pattern =>
{
	The idea is what kind of object must be created base on some kindof parameters
}

Template method pattern => 
{
	Subclass decide how to implement steps in an algorithm.
}

Adapter pattern => 
{
	Adapter pattern is a engineering pattern which allows us to use this structure 
	or interface of an existing class with another class which is considerably different and is not 
	compatible.
	Adapter pattern is most frequently used when we need to retrofit the classes created
	for a legacy system to be used with bew classes which cannot be integrated directly with The
	legacy classes
	A readl-world example can be of a video cable which can be used to convert a VGA output from a
	graphics card into a DVI input supported by monitor that we are using the final
	output is a video on the screen but the source video data is different 
	A code example can be of an older class whch has a function returning computational data
	which cannot be directly used wiht the new ouput requirements but it also be a waste of time and resources to 
	again write the computational logic or maybe copy it to a new class 
}

Facade pattern =>
{
	This design pattern will provide an unified and simplified interface in a subsystem 
	there for it hides the complexities of the subsystem from the client.
	It means if you have a client and a complex class than "FACADE" provides a simplified to a complex set of classes
	now instead of classes it can be complex or component or a group of component as well 
}